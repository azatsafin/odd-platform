name: PR Build and Deploy
on:
  pull_request:
    types: [ 'labeled' ]

concurrency: main_build

jobs:
  images:
    if: ${{ github.event.label.name == 'test/deploy' }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: 436866023604.dkr.ecr.eu-central-1.amazonaws.com
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1.3.3
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Cache local Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-shared-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
#      - name: Run tests and build the image
#        env:
#          GENERATE_SOURCEMAP: false
#          CI: false
#        run: ./gradlew jibDockerBuild --no-daemon --image ${{ env.REGISTRY }}/${{ github.event.repository.name }} --scan -Pversion=ci-${GITHUB_SHA::6} -Penv=prod
#      - name: Push Docker image to Amazon ECR
#        run: docker push ${{ env.REGISTRY }}/${{ github.event.repository.name }}:ci-${{ github.event.pull_request.number }}
      - uses: actions/checkout@v2
        with:
          repository: provectus/environment-state
          token: ${{ secrets.GH_PAT }}
      - run: |
          ls -la
          ls -la provectus/environment-state
#      - name: Install ArgoCD CLI
#        run: |
#          curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#          chmod +x ./argocd
#      - name: Login into ArgoCD
#        run: ./argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_LOGIN }} --password '${{ secrets.ARGOCD_PASSWORD }}' --grpc-web
#      - name: Sync ODD Platform application
#        run: ./argocd app sync environments --force --resource argoproj.io:Application:odd-platform
